// SPDX-License-Identifier: MIT

pragma solidity ^0.8.21;


contract Todo {
  // Custom errors for gas-effiecnt revert
  error TodoListDoesNotExist(uint index);
  error TodoItemDoesNotExist(uint todoIndex, uint itemIndex);
  error InvalidInput(string field);


  event CreateTodoList(address indexed from, string todoTitle);
  event UpdateTodoList(address indexed from, string todoTitle);
  event DeleteTodoList(address indexed from, string todoTitle);
  event AddTodoItem(address indexed from, string message, string description);
  event DeleteTodoItem(address indexed from, string message, string description);

  struct TodoItem {
    string message;
    string description;
  }

  struct TodoList {
    string title;
    TodoItem[] items;
  }

  mapping(address => TodoList[]) private TodoLists;

  modifier todoListExists(uint _todoIndex) {
    if(_todoIndex >= TodoLists[msg.sender].length) {
      revert TodoListDoesNotExist(_todoIndex);
    }
    _;
  }

  modifier todoItemExists(uint _todoIndex, uint _itemIndex) {
    if (_itemIndex >= TodoLists[msg.sender][_todoIndex].items.length) {
      revert TodoItemDoesNotExist(_todoIndex, _itemIndex);
    }
    _;
  }

  function createTodoList(string memory _title) external {
    if(bytes(_title).length == 0) revert InvalidInput("Title");

    TodoList memory newList = TodoList({
      title: _title, 
      items: new TodoItem[](0)
    });
      
    TodoLists[msg.sender].push(newList);
    emit CreateTodoList(msg.sender, _title);
  }

  function addTodoItem(uint _todoIndex, string memory _message, string memory _description) external todoListExists(_todoIndex) {
    if (bytes(_message).length == 0) revert InvalidInput("Message");

    TodoItem memory newItem = TodoItem({
      message: _message,
      description: _description
    });

    TodoLists[msg.sender][_todoIndex].items.push(newItem);

    emit AddTodoItem(msg.sender, _message, _description);
  }

  function updateTodoList(uint _index, string memory _title) public todoListExists(_index)  {
    if (bytes(_title).length  == 0) revert InvalidInput("Title");
    TodoLists[msg.sender][_index].title = _title;

    emit UpdateTodoList(msg.sender, TodoLists[msg.sender][_index].title);
  }

  function deleteTodoList(uint _todoIndex) external todoListExists(_todoIndex) {
    uint lastTodoIndex = this.countTodoLists() - 1;

    if(_todoIndex != lastTodoIndex) {
      TodoLists[msg.sender][_todoIndex] = TodoLists[msg.sender][lastTodoIndex];
    }

    TodoLists[msg.sender].pop();
    emit DeleteTodoList(msg.sender, TodoLists[msg.sender][_todoIndex].title);
  }

  function deleteTodoItem(uint _todoIndex, uint _itemIndex) external todoListExists(_todoIndex) todoItemExists(_todoIndex, _itemIndex) {
    
    uint lastItemIndex = this.countTodoItems(_todoIndex) - 1;

    if(_itemIndex != lastItemIndex) {
      TodoLists[msg.sender][_todoIndex].items[_itemIndex] = TodoLists[msg.sender][_todoIndex].items[lastItemIndex];
    }

    TodoLists[msg.sender][_todoIndex].items.pop();

    emit DeleteTodoItem(msg.sender, TodoLists[msg.sender][_todoIndex].items[_todoIndex].message, TodoLists[msg.sender][_todoIndex].items[_todoIndex].description);
  }

  // function getTodoById(uint _todoIndex) external view todoListExists(_todoIndex) returns(string memory title, TodoItem[] memory) {
  //   return (string(abi.encodePacked("Title: ", TodoLists[msg.sender][_todoIndex].title, "Items: ")), TodoLists[msg.sender][_todoIndex].items);
  // }

  function countTodoLists() external view returns(uint) {
    return TodoLists[msg.sender].length;
  }

  function countTodoItems(uint _todoIndex) external view returns(uint) {
    return TodoLists[msg.sender][_todoIndex].items.length;
  }
}
